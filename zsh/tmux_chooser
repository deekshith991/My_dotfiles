#!/usr/bin/bash
# shellcheck disable=SC2206

# Custom handling for Ctrl+C
function ctrl_c() {
  printf "\nType 'nil' to exit to the normal prompt.\n"
}

trap ctrl_c SIGINT

# Custom handling for Ctrl+X
function ctrl_x() {
  printf "\nCtrl+X pressed. Exiting.\n"
  exit 0
}

# Bind Ctrl+X to the abort function
trap ctrl_x SIGQUIT

# Predefined list of session names and their corresponding directories
declare -A session_dirs=(
  ["job_portal"]="/home/deekshith/deekshith/github/job_portal_1"
  ["learning"]="/home/deekshith/deekshith/github/learning"
  ["github"]="/home/deekshith/deekshith/github"
  ["dev"]="/path/to/dev"
  ["backup"]="/path/to/backup"
)

predefined_sessions=("Acer" "learning" "job_portal" "github" "dev" "backup")

# Get the list of tmux session names
output=($(tmux list-sessions -F "#{session_name}" 2>/dev/null))
no_of_terminals=${#output[@]}

# Display options to the user
printf "\n\033[1;32m✨ Available tmux Sessions ✨\033[0m\n"
printf "──────────────────────────────────────────\n"

if [[ $no_of_terminals -gt 0 ]]; then
  # Display existing sessions if available
  for ((k = 1; k <= no_of_terminals; k++)); do
    printf "  \033[1;34m%d\033[0m - %s\n" "$k" "${output[k - 1]}"
  done
else
  printf "No active tmux sessions found.\n"
fi

# Display predefined sessions for new session creation
printf "\n\033[1;32m✨ Predefined Workspaces ✨\033[0m\n"
printf "──────────────────────────────────────────\n"
for ((k = 1; k <= ${#predefined_sessions[@]}; k++)); do
  printf "  \033[1;34m%d\033[0m - %s\n" "$((no_of_terminals + k))" "${predefined_sessions[k - 1]}"
done
printf "──────────────────────────────────────────\n"
printf "Options:\n"
printf "  \033[1;34m1\033[0m. Enter a session number to attach to an existing session.\n"
printf "  \033[1;34m2\033[0m. Select a predefined workspace number to create and open a new session.\n"
printf "  \033[1;34m3\033[0m. Type a custom name to create a new session.\n"
printf "  \033[1;34m4\033[0m. Enter 'q' to exit.\n\n"

# Prompt for input on a separate line
printf "\033[1;33mYour choice:\033[0m "
read -r input

# Process user input
if [[ $input == "q" || $input == "nil" ]]; then
  printf "Exiting.\n"
  exit 0
elif [[ $input =~ ^[0-9]+$ ]]; then
  # Check if input corresponds to an existing session
  if ((input >= 1 && input <= no_of_terminals)); then
    terminal_name="${output[input - 1]}"
    tmux attach -t "$terminal_name"
  # Check if input corresponds to a predefined session
  elif ((input > no_of_terminals && input <= (no_of_terminals + ${#predefined_sessions[@]}))); then
    session_name="${predefined_sessions[input - no_of_terminals - 1]}"
    session_dir="${session_dirs[$session_name]}"
    if [[ -d $session_dir ]]; then
      tmux new-session -s "$session_name" -c "$session_dir"
    else
      printf "Directory %s does not exist. Opening in home directory.\n" "$session_dir"
      tmux new-session -s "$session_name" -c "$HOME"
    fi
  else
    printf "Invalid choice. Exiting.\n"
    exit 0
  fi
elif [[ $input =~ ^[a-zA-Z0-9_-]+$ ]]; then
  # Treat input as a custom session name
  tmux new-session -s "$input" -c "$HOME"
else
  printf "Invalid input. Exiting.\n"
  exit 0
fi

exit 0
